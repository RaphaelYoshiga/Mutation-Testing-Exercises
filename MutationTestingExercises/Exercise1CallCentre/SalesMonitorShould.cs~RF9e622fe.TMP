using Moq;
using NUnit.Framework;
using System.Collections.Generic;

namespace MutationTestingExercises.Exercise1CallCentre
{
    [TestFixture]
    public class SalesMonitorShould
    {
        private SalesMonitor _salesMonitor;
        private Mock<Alert> _alert;

        [SetUp]
        public void SetUp()
        {
            _salesMonitor = new SalesMonitor();
            _alert = new Mock<Alert>();

            _salesMonitor.AddAlert(_alert.Object);
        }

        [TestCase(101)]
        [TestCase(100)]
        [TestCase(1000)]
        public void Raise_an_alert_when_a_high_value_sale_is_made(int saleAmount)
        {
            _salesMonitor.ProcessSale(saleAmount);

            _alert.Verify(a => a.Raise());
        }

        [TestCase(3)]
        [TestCase(99)]
        public void Not_raise_an_alert_when_a_low_value_sale_is_made(int saleAmount)
        {
            _salesMonitor.ProcessSale(saleAmount);

            _alert.Verify(a => a.Raise(), Times.Never);
        }

        [Test]
        public void Raise_as_many_alerts_as_listeners()
        {
            var alertListeners = new List<Mock<Alert>>()
            {
                new Mock<Alert>(),
                new Mock<Alert>(),
                new Mock<Alert>()
            };

            var salesMonitor = new SalesMonitor();
            foreach (var alert in alertListeners)
                salesMonitor.AddAlert(alert);


            int higherThanThreshHoldValue = 999;
            _salesMonitor.ProcessSale(higherThanThreshHoldValue);



        }
    }
}
